name: 🚀 Automated Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New release version (e.g. v1.0.0)'
        required: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0           # recomendable para tags/CHANGES
          persist-credentials: true

      - name: 🧭 Configure git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🏷️ Create & push tag
        env:
          VERSION: ${{ github.event.inputs.version }}
        run: |
          # crea/actualiza tag anotado
          git tag -a "$VERSION" -m "Release $VERSION" || git tag -d "$VERSION" && git tag -a "$VERSION" -m "Release $VERSION"
          # empuja SOLO el tag (no la rama)
          git push origin "refs/tags/$VERSION"

      - name: 📖 Extract changelog for tag
        id: extract_changelog
        env:
          VERSION: ${{ github.event.inputs.version }}
        run: |
          # Extract the section of the CHANGELOG that starts at "## vX.Y.Z"
          # If it is the last section and there is no "##" following it, this fallback avoids going empty
          if awk "/^## ${VERSION} /,/^## /" CHANGELOG.md | sed '1d;$d' > part.md && [ -s part.md ]; then
            :
          else
          # takes from version header to EOF (without trimming last line)
            awk "/^## ${VERSION} /{flag=1} flag{print}" CHANGELOG.md > part.md
          fi
          {
            echo "body<<'EOF'"
            cat part.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: ${{ github.event.inputs.version }}
          body: ${{ steps.extract_changelog.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}